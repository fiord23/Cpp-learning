//task_7
// сортировка объектов через массив указателей на них
#include <iostream>
#include <string>
using namespace std;
///////////////////////////////////////////////////////////
	class person // некоторый человек
	{
	protected:
		string name; // имя
		float salary;
	public:
		void setData() // установка имени
		{
			cout << "Write name: "; cin >> name;
			cout << "Write salary: "; cin >> salary;
		}
		void printData() // показ имени
		{
			cout <<endl << "------------------";
			cout << endl << name;
			cout << endl << salary;
		}
		string getName() // получение имени
		{
			return name;
		}
		float getSalary()
		{
			return salary;
		}
	};

/////////////////////////////////////////////////////////// 
	int main()
	{
		void bsort(person**, int);
		person* persPtr[100]; // массив указателей на person
		int n = 0; // количество элементов в массиве
		char choice; // переменная для ввода символа
		do
		{
			persPtr[n] = new person; // создаем новый объект
			persPtr[n]->setData(); // вводим имя
			n++; // увеличиваем количество
			cout << "Continiue (y/n)?"; // спрашиваем, закончен ли ввод
			cin >> choice;
		} while (choice == 'y');
		cout << "\nUnsorted:";
		for (int j = 0; j < n; j++) // покажем неотсортированный список
			persPtr[j]->printData();
		bsort(persPtr, n); // отсортируем указатели
		cout << "\nSorted:";
		for (int j = 0; j < n; j++) // покажем отсортированный список
			persPtr[j]->printData();
		cout << endl;
		return 0;
	}

///////////////////////////////////////////////////////////
	void bsort(person** pp, int n)
	{
		void order(person**, person**); // прототип функции
		int j, k; // переменные для циклов
		for (j = 0; j < n - 1; j++) // внешний цикл
			for (k = j + 1; k < n; k++) // внутренний цикл
				if ((*(pp + j))->getSalary() > (*(pp + k))->getSalary())
				{
					person* tempptr = *(pp + j); // меняем их местами
					*(pp + j) = *(pp + k);
					*(pp + k) = tempptr;
				}
	}
///////////////////////////////////////////////////////////