//task_12
#include <iostream>
#include "math.h"
#include "iomanip"
char dummychar = '/';
using namespace std;

class fract
{
private:
	int numerator;
	int denominator;
public:
	fract() : numerator(1), denominator(1) {}
	void getfrac();
	void fadd(fract, fract);
	void fsub(fract, fract);
	void fmul(fract, fract);
	void fdiv(fract, fract);
	void fractprint();
	void lowterms();
	void denominatorget();
	void coloumnprint(fract);
	void rowprint(fract f1);
};



int main()
{
	fract fract1, fract2, fractres;
	fract1.denominatorget();
	fract1.rowprint(fract1);
	cout << setw(80) << setfill('-') << '-' << endl; cout << setfill(' ');
	fract1.coloumnprint(fract1);
	return 1;
}

void fract::coloumnprint(fract f1) 
{
	fract temp1, temp2, temp3, temp4;
	temp4.numerator = 0;
	int t = f1.denominator;
	for (int i = 1; i < t ; i++)
	{
		temp1.fadd(f1, temp4);
		temp1.lowterms();
		temp1.fractprint();
		temp2.numerator = 1;
		temp2.denominator = t;
		for (int j = 1; j < t; j++)
		{
			temp3.fmul(temp1, temp2);
			temp3.lowterms();
			cout << setw(7);
			temp3.fractprint();
			temp2.numerator++;
		} 
		f1.numerator++;
		cout << endl;
	}
	
	
}


void fract::rowprint(fract f1)
{
	fract temp, temp2;
	temp2.denominator = 1;
	temp2.numerator = 0;
	int t = f1.denominator;
	cout << setw(7)<< ' '; 
	for (int i = 0; i < t - 1; i++)
	{
		temp.fadd(f1, temp2);
		temp.lowterms();
		cout << setw(7);
		temp.fractprint();
		f1.numerator++;
	}
	cout << endl;
}


void fract::denominatorget() 
{
	cout << endl << "Denominator: ";
	cin >> denominator;
}
void fract::getfrac()
{
	cout << endl << "Numerator/Denominator: ";
	cin >> numerator >> dummychar >> denominator;
}


void fract::fadd(fract fract1, fract fract2)
{
	fract fractres;
	numerator = fract1.numerator * fract2.denominator + fract1.denominator * fract2.numerator;
	denominator = fract1.denominator * fract2.denominator;

}

void fract::fsub(fract fract1, fract fract2)
{
	numerator = fract1.numerator * fract2.denominator - fract1.denominator * fract2.numerator;
	denominator = fract1.denominator * fract2.denominator;
}

void fract::fmul(fract fract1, fract fract2)
{
	numerator = fract1.numerator * fract2.numerator;
	denominator = fract1.denominator * fract2.denominator;
}

void fract::fdiv(fract fract1, fract fract2)
{
	numerator = fract1.numerator * fract2.denominator;
	denominator = fract1.denominator * fract2.numerator;
}
void fract::fractprint()
{
	cout << numerator << dummychar << denominator;
}

void fract::lowterms() // сокращение дроби
{
	long tnum, tden, temp, gcd;
	tnum = labs(numerator); // используем неотрицательные
	tden = labs(denominator); // значения (нужен cmath)
	if (tden == 0) // проверка знаменателя на 0
	{
		cout << "Error denominator!"; exit(1);
	}
	else if (tnum == 0) // проверка числителя на 0
	{
		numerator = 0; denominator = 1; return;
	}
	// нахождение наибольшего общего делителя
	while (tnum != 0)
	{
		if (tnum < tden) // если числитель больше знаменателя,
		{
			temp = tnum; tnum = tden; tden = temp;
		} // меняем их местами
		tnum = tnum - tden; // вычитание
	}
	gcd = tden; // делим числитель и знаменатель на
	numerator = numerator / gcd; // полученный наибольший общий делитель
	denominator = denominator / gcd;
}
