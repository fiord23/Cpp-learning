//task_7
#include <iostream>
#include <conio.h>
#include "math.h"
char dummychar = '/';
using namespace std;

class fract
{
private:
	int numerator;
	int denominator;
public:
	fract() : numerator(0), denominator(1) {}
	fract(int n, int d): numerator(n), denominator(d) { }
	void getfrac();
	fract operator+(fract f1);
	fract operator-(fract f1);
	fract operator*(fract f1);
	fract operator/(fract f1);
	bool operator == (fract f1);
	bool operator != (fract f1);
	void fractprint();
	void lowterms();
};



int main()
{
	fract fract1, fract2, fractres;
	char operation;

	do
	{
		fract1.getfrac();
		cout << "operation: ";
		cin >> operation;
		fract2.getfrac();

		switch (operation)
		{
		case '+':
			fractres = fract1 + fract2; break;
		case '-':
			fractres = fract1 - fract2; break;

		case '*':
			fractres = fract1*fract2; break;

		case '/':
			fractres = fract1 / fract2; break;
		default: cout << endl << "wrong!" << endl;
		}
		fractres.lowterms();
		fractres.fractprint();
		cout << endl << " More(y/n)? ";
	} while (_getche() == 'y');
	return 1;
}

void fract::getfrac()
{
	cout << endl << "Numerator/Denominator: ";
	cin >> numerator >> dummychar >> denominator;
	if (denominator == 0)
	{
		cout << endl << "ERROR!" << endl;
		exit(1);
	}
}
fract fract:: operator+(fract f1)
{
	
	int num = 0;
	int denom = 0;
	num = numerator * f1.denominator + denominator * f1.numerator;
	denom = denominator * f1.denominator;
	return fract(num, denom);
}
fract fract:: operator-(fract f1)
{
	int num = 0;
	int denom = 0;
	num = numerator * f1.denominator - denominator * f1.numerator;
	denom = denominator * f1.denominator;
	return fract(num, denom);
}
fract fract:: operator*(fract f1)
{
	int num = 0;
	int denom = 0;
	num = numerator * f1.numerator;
	denom = denominator * f1.denominator;
	return fract(num, denom);
}
fract fract:: operator/(fract f1)
{
	int num = 0;
	int denom = 0;
	num = numerator * f1.denominator;
	denom = denominator * f1.numerator;
	return fract(num, denom);
}
bool fract:: operator == (fract f1)
{
	if ((numerator == f1.numerator) && (denominator == f1.denominator))
		return true;
	else return false;
}
bool fract:: operator != (fract f1)
{
	if ((numerator != f1.numerator)  || (denominator != f1.denominator))
		return true;
	else return false;
}
void fract::fractprint()
{
	cout << "Result = " << numerator << dummychar << denominator << endl;
}
void fract::lowterms() // сокращение дроби
{
	long tnum, tden, temp, gcd;
	tnum = labs(numerator); // используем неотрицательные
	tden = labs(denominator); // значения (нужен cmath)
	if (tden == 0) // проверка знаменателя на 0
	{
		cout << "Error denominator!"; exit(1);
	}
	else if (tnum == 0) // проверка числителя на 0
	{
		numerator = 0; denominator = 1; return;
	}
	// нахождение наибольшего общего делителя
	while (tnum != 0)
	{
		if (tnum < tden) // если числитель больше знаменателя,
		{
			temp = tnum; tnum = tden; tden = temp;
		} // меняем их местами
		tnum = tnum - tden; // вычитание
	}
	gcd = tden; // делим числитель и знаменатель на
	numerator = numerator / gcd; // полученный наибольший общий делитель
	denominator = denominator / gcd;
}
