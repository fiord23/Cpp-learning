//task_12
#include <iostream>
#include "math.h"
using namespace std;
char dot = '.';
char slash = '/';
class Sterling
{
protected:
	int pounds;
	int shillings;
	int pence;
public:
	Sterling() : pounds(0), shillings(0), pence(0) {}
	Sterling(double old)
	{
		double decfrac;
		pounds = static_cast<int>(old);
		decfrac = old - pounds;
		shillings = 20 * decfrac;
		pence = (240 * decfrac) - (12 * shillings);
	}
	Sterling(int p, int s, int pen) : pounds(p), shillings(s), pence(pen) {}
	void getSterling(void)
	{
		cout << endl << "Write Sterlings in old format: £" ;
		cin >> pounds >> dot >> shillings >> dot >> pence;
	}
	void putSterling(void) const
	{
		cout << endl << "Sterling in old format: £" << pounds << dot << shillings << dot << pence;
	}
	operator double()
	{
		double res;
		res = static_cast<double>(pounds) + ((static_cast<double>(pence) / 12.0 + static_cast<double>(shillings)) / 20);
		return res;
	}
	Sterling operator+ (Sterling s2)
	{
		return Sterling(double(Sterling(pounds, shillings, pence)) + double(s2));
	}
	Sterling operator- (Sterling s2)
	{
		return Sterling(double(Sterling(pounds, shillings, pence)) - double(s2));
	}
	Sterling operator* (double s2)
	{
		return Sterling(double(Sterling(pounds, shillings, pence)) * s2);
	}
	Sterling operator/ (Sterling s2)
	{
		return Sterling(double(Sterling(pounds, shillings, pence)) / double(s2));

	}
	Sterling operator/ (double s2)
	{
		return Sterling(double(Sterling(pounds, shillings, pence)) / s2);
	}
};

class fract
{
protected:
	int numerator;
	int denominator;
public:
	fract() : numerator(1), denominator(1) {}
	fract (int n, int d) : numerator(n), denominator(d) 
	{ }
	void lowterms()
	{
		long tnum, tden, temp, gcd;
		tnum = labs(numerator); // используем неотрицательные
		tden = labs(denominator); // значения (нужен cmath)
		if (tden == 0) // проверка знаменателя на 0
		{
			cout << "Error denominator!"; exit(1);
		}
		else if (tnum == 0) // проверка числителя на 0
		{
			numerator = 0; denominator = 1; return;
		}
		// нахождение наибольшего общего делителя
		while (tnum != 0)
		{
			if (tnum < tden) // если числитель больше знаменателя,
			{
				temp = tnum; tnum = tden; tden = temp;
			} // меняем их местами
			tnum = tnum - tden; // вычитание
		}
		gcd = tden; // делим числитель и знаменатель на
		numerator = numerator / gcd; // полученный наибольший общий делитель
		denominator = denominator / gcd;
	}
	void fadd(fract fract1, fract fract2)
	{
		//fract fractres;
		numerator = fract1.numerator * fract2.denominator + fract1.denominator * fract2.numerator;
		denominator = fract1.denominator * fract2.denominator;
		//return fractres;
	}
	void fractprint()
	{
		cout << numerator << slash << denominator;
	}

};
class Sterfrac : public Sterling, public fract
{
private:
	fract f1;
public:
	Sterfrac() : Sterling(), fract()
	{}
	Sterfrac(int po, int shi, int pen, int num, int den) : Sterling(po, shi, pen), fract(num, den)
	{}

	void getSterling(void)
	{
		Sterling::getSterling();
		cout << "Write fract pens:"; cin >> numerator >> slash >> denominator;
	}
	void putSterling(void)
	{

		Sterling::putSterling();
		cout << "-";
		fract::lowterms();
		fract::fractprint();
	}

	Sterfrac operator+ (Sterfrac s2)
	{
		Sterfrac res;
		res.pounds = pounds + s2.pounds;
		res.shillings = shillings + s2.shillings;
		res.pence = pence + s2.pence;
		res.numerator = numerator * s2.denominator + denominator * s2.numerator;
		res.denominator = denominator * s2.denominator;
		res.fract::lowterms();
		if (res.numerator >= res.denominator)
		{
			res.pence++;
			res.numerator -= 8;
		}
		if (res.pence >= 12)
		{
			res.shillings++;
			res.pence -= 12;
		}
		if (res.shillings >= 20)
		{
			res.pounds++;
			res.shillings -= 20;
		}
		return res;
	}

};



int main()
{
	Sterfrac s1(12, 12, 10, 2, 8);
	s1.putSterling();
	Sterfrac s2(12, 12, 3, 7, 8);
	s2.putSterling();
	Sterfrac s3 = s1 + s2;
	s3.putSterling();
	return 0;
}

